// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  admin
  store_owner
  store_manager
  client
}

enum OrderStatus {
  pending
  delivered
  rejected
}

model User {
  id            Int      @id @default(autoincrement())
  first_name    String   @db.VarChar(35)
  last_name     String   @db.VarChar(35)
  phone_number  String   @db.VarChar(10)
  role          Roles    @default(client)
  date_of_birth DateTime @db.Date
  email         String   @unique @db.VarChar(255)
  password      String   @db.VarChar(255)
  store         Store?   @relation(name: "owner_ship")
  manager_at    Store?   @relation(name: "managers", fields: [store_id], references: [id], onDelete: SetNull)
  store_id      Int?
  orders        Order[]
  cart          Cart?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  @@index([email,phone_number])
}

model Cart {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  Int       @unique
  products Product[]
}

model Store {
  id         Int       @id @default(autoincrement())
  slug       String    @unique
  name       String    @db.VarChar(70)
  logo       String    @db.VarChar(255)
  products   Product[]
  owner      User      @relation(name: "owner_ship", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id   Int       @unique
  managers   User[]    @relation(name: "managers")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  @@index([slug])
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String           @db.VarChar(200)
  description String           @db.LongText
  stock       Int              @default(0)
  variants    ProductVariant[]
  is_featured Boolean          @default(false)
  is_promoted Boolean          @default(false)
  store       Store            @relation(fields: [store_id], references: [id], onDelete: Cascade)
  store_id    Int
  ordered_by  OrderItem[]
  cart_by     Cart[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}

model ProductVariant {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(100)
  price      Decimal @db.Decimal(9, 2)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
}


model OrderItem{
  id Int @id @default(autoincrement())
  product_id Int
  quantity Int @db.UnsignedInt
  price Decimal @db.Decimal(9,2)
  order_id Int
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
model Order {
  id         Int         @id @default(autoincrement())
  items   OrderItem[]
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  is_payed   Boolean     @default(false)
  status     OrderStatus @default(pending)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}
